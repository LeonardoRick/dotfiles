#!/usr/bin/env zsh
##############################################################
# callable functions (zsh only)
##############################################################

# Set default mic to internal
function defmic() {
  # Get the current audio source
  current_input=$(SwitchAudioSource -c)

  # Set the desired (default) audio source
  default_input=$(SwitchAudioSource -a | grep -E '(MacBook|Bulti-in).*Micro')

  # Check if current source matches the default
  if [ "$current_input" != "$default_input" ]; then
      # Change audio input to default
      SwitchAudioSource -s "$default_input" -t input
  else
      log.warning "Audio input is already $default_input"
  fi
}

# Set default speaker to internal
function defspeak() {
  # Get the current audio source
  current_output=$(SwitchAudioSource -c)

  # Set the desired (default) audio source
  default_output=$(SwitchAudioSource -a | grep -E '(MacBook|Bulti-in).*Speak')

  # Check if current source matches the default
  if [ "$current_output" != "$default_output" ]; then
      # Change audio output to default
      SwitchAudioSource -s "$default_output"
  else
      log.warning "Audio input is already $default_output"
  fi
}

# Web Service Don't Sleep is a function to ping on a web service to keep it awake.
# Since renderer and other services sleeps after inactivity on free tier, this function
# pings the web service every X minutes to keep it awake. The default sleep time is 10 minute s
# since renderer sleeps after 15 minutes of inactivity. https://render.com/docs/free#free-web-services
function wsdontsleep() {
  websites=()
  time_to_sleep=10

  # Parse arguments
  for arg in "$@"; do
    case "$arg" in
      sleep=*)
        time_to_sleep="${arg#*=}"
        ;;
      *)
        websites+=("$arg")
        ;;
    esac
  done

  if [ ${#websites[@]} -eq 0 ]; then
    log.info "Usage: wsdontsleep [website1] [website2] [...] [sleep=<time_in_minutes>] (default sleep=10)"
    return 1
  fi
  while true; do
    now=[$(date '+%Y-%m-%d %H:%M:%S')]
    for website in "${websites[@]}"; do
      curl -sSfL $website > /dev/null
      if [ $? -eq 0 ]; then
        log.success "$now Keeping $website up!"
      else
        log.error "$now Website is down. Unable to ping $website"
      fi
    done

    log.warning "$now Next ping in $time_to_sleep minutes"
    sleep $(($time_to_sleep * 60))
  done
}

##############################################################
# Background functions (zsh only)
##############################################################
function set_zsh_and_apply_leonardorick_theme() {
  # Use your custom theme name.
  ZSH_THEME="leonardorick"

  if [ "$EUID" -eq 0 ]; then
    # Root environment:
    # ------------------------------------------------------
    export ZSH_DISABLE_COMPFIX=true
    # So oh-my-zsh won't complain about insecure dirs.

    export ZSH_COMPDUMP="/var/root/.zcompdump"
    # Tells oh-my-zsh (and compinit) to store the dump file in root's home,
    # avoiding collisions with your user’s .zcompdump.

    export ZSH="/var/root/.oh-my-zsh"
    # Make sure /var/root/.oh-my-zsh exists or is a symlink to your user’s oh-my-zsh folder.
  else
    # Normal user environment:
    # ------------------------------------------------------
    export ZSH_DISABLE_COMPFIX=false
    export ZSH_COMPDUMP="$HOME/.zcompdump"
    export ZSH="$HOME/.oh-my-zsh"
  fi

  # oh-my-zsh.sh automatically calls compinit with the above settings.
  source "$ZSH/oh-my-zsh.sh"
}
